{
  "/Users/khouloudouelhazi/meet/auth-server": {
    "versionSfCore": null,
    "versionFramework": "4.1.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "file": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "auth-server",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "eu-central-1",
              "timeout": 30,
              "environment": {
                "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
                "CLIENT_SECRET": "<REDACTED>",
                "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "GetAuthURLLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/auth-server-dev-getAuthURL"
                    }
                  },
                  "GetAccessTokenLogGroup": "<REDACTED>",
                  "GetCalendarEventsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/auth-server-dev-getCalendarEvents"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "auth-server",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "auth-server",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAuthURLLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/auth-server/dev/1718586302427-2024-06-17T01:05:02.427Z/auth-server.zip"
                      },
                      "Handler": "handler.getAuthURL",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "auth-server-dev-getAuthURL",
                      "MemorySize": 1024,
                      "Timeout": 30,
                      "Environment": {
                        "Variables": {
                          "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
                          "CLIENT_SECRET": "<REDACTED>",
                          "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAuthURLLogGroup"
                    ]
                  },
                  "GetAccessTokenLambdaFunction": "<REDACTED>",
                  "GetCalendarEventsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/auth-server/dev/1718586302427-2024-06-17T01:05:02.427Z/auth-server.zip"
                      },
                      "Handler": "handler.getCalendarEvents",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "auth-server-dev-getCalendarEvents",
                      "MemorySize": 1024,
                      "Timeout": 30,
                      "Environment": {
                        "Variables": {
                          "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
                          "CLIENT_SECRET": "<REDACTED>",
                          "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCalendarEventsLogGroup"
                    ]
                  },
                  "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAuthURLLambdaFunction"
                      },
                      "CodeSha256": "r7KOOS2UsqDGSrZs4KSOtw4jfwkoRQuud83ZPSTHckQ="
                    }
                  },
                  "GetAccessTokenLambdaVersionPx0lfY8b7Ro4eXMG7n6W3DgQlAUqHUK62x2XmuIdcQ": "<REDACTED>",
                  "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCalendarEventsLambdaFunction"
                      },
                      "CodeSha256": "r7KOOS2UsqDGSrZs4KSOtw4jfwkoRQuud83ZPSTHckQ="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-auth-server",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceApi": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "api",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiGetDashauthDashurl": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceApi"
                      },
                      "PathPart": "get-auth-url",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiGetDashaccessDashtoken": "<REDACTED>",
                  "ApiGatewayResourceApiGetDashaccessDashtokenCodeVar": "<REDACTED>",
                  "ApiGatewayResourceApiGetDashevents": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceApi"
                      },
                      "PathPart": "get-events",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiGetDasheventsAccesstokenVar": "<REDACTED>",
                  "ApiGatewayMethodApiGetDashauthDashurlOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarOptions": "<REDACTED>",
                  "ApiGatewayMethodApiGetDasheventsAccesstokenVarOptions": "<REDACTED>",
                  "ApiGatewayMethodApiGetDashauthDashurlGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAuthURLLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAuthURLLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarGet": "<REDACTED>",
                  "ApiGatewayMethodApiGetDasheventsAccesstokenVarGet": "<REDACTED>",
                  "ApiGatewayDeployment1718586299696": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodApiGetDashauthDashurlOptions",
                      "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarOptions",
                      "ApiGatewayMethodApiGetDasheventsAccesstokenVarOptions",
                      "ApiGatewayMethodApiGetDashauthDashurlGet",
                      "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarGet",
                      "ApiGatewayMethodApiGetDasheventsAccesstokenVarGet"
                    ]
                  },
                  "GetAuthURLLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAuthURLLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAccessTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "GetCalendarEventsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCalendarEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetAuthURLLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw"
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAccessTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "GetCalendarEventsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY"
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-GetCalendarEventsLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getAuthURL": {
                "handler": "handler.getAuthURL",
                "events": [
                  {
                    "http": {
                      "path": "api/get-auth-url",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "auth-server-dev-getAuthURL",
                "package": {},
                "memory": 1024,
                "timeout": 30,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw"
              },
              "getAccessToken": "<REDACTED>",
              "getCalendarEvents": {
                "handler": "handler.getCalendarEvents",
                "events": [
                  {
                    "http": {
                      "path": "api/get-events/{access_token}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "auth-server-dev-getCalendarEvents",
                "package": {},
                "memory": 1024,
                "timeout": 30,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY"
              }
            }
          },
          "configFileDirPath": "/Users/khouloudouelhazi/meet/auth-server",
          "config": {
            "type": "file"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/khouloudouelhazi/meet/auth-server",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "auth-server",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-central-1",
        "timeout": 30,
        "environment": {
          "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
          "CLIENT_SECRET": "<REDACTED>",
          "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "GetAuthURLLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/auth-server-dev-getAuthURL"
              }
            },
            "GetAccessTokenLogGroup": "<REDACTED>",
            "GetCalendarEventsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/auth-server-dev-getCalendarEvents"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "auth-server",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "auth-server",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetAuthURLLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/auth-server/dev/1718586302427-2024-06-17T01:05:02.427Z/auth-server.zip"
                },
                "Handler": "handler.getAuthURL",
                "Runtime": "nodejs20.x",
                "FunctionName": "auth-server-dev-getAuthURL",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
                    "CLIENT_SECRET": "<REDACTED>",
                    "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAuthURLLogGroup"
              ]
            },
            "GetAccessTokenLambdaFunction": "<REDACTED>",
            "GetCalendarEventsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/auth-server/dev/1718586302427-2024-06-17T01:05:02.427Z/auth-server.zip"
                },
                "Handler": "handler.getCalendarEvents",
                "Runtime": "nodejs20.x",
                "FunctionName": "auth-server-dev-getCalendarEvents",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "CLIENT_ID": "1031697911112-mgjaimnd1eh29u1iee3qhfepthce2o85.apps.googleusercontent.com",
                    "CLIENT_SECRET": "<REDACTED>",
                    "CALENDAR_ID": "khouloud.ouelhazi24@gmail.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCalendarEventsLogGroup"
              ]
            },
            "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAuthURLLambdaFunction"
                },
                "CodeSha256": "r7KOOS2UsqDGSrZs4KSOtw4jfwkoRQuud83ZPSTHckQ="
              }
            },
            "GetAccessTokenLambdaVersionPx0lfY8b7Ro4eXMG7n6W3DgQlAUqHUK62x2XmuIdcQ": "<REDACTED>",
            "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCalendarEventsLambdaFunction"
                },
                "CodeSha256": "r7KOOS2UsqDGSrZs4KSOtw4jfwkoRQuud83ZPSTHckQ="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-auth-server",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceApi": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashauthDashurl": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "get-auth-url",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashaccessDashtoken": "<REDACTED>",
            "ApiGatewayResourceApiGetDashaccessDashtokenCodeVar": "<REDACTED>",
            "ApiGatewayResourceApiGetDashevents": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "get-events",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDasheventsAccesstokenVar": "<REDACTED>",
            "ApiGatewayMethodApiGetDashauthDashurlOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarOptions": "<REDACTED>",
            "ApiGatewayMethodApiGetDasheventsAccesstokenVarOptions": "<REDACTED>",
            "ApiGatewayMethodApiGetDashauthDashurlGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAuthURLLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAuthURLLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarGet": "<REDACTED>",
            "ApiGatewayMethodApiGetDasheventsAccesstokenVarGet": "<REDACTED>",
            "ApiGatewayDeployment1718586299696": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodApiGetDashauthDashurlOptions",
                "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarOptions",
                "ApiGatewayMethodApiGetDasheventsAccesstokenVarOptions",
                "ApiGatewayMethodApiGetDashauthDashurlGet",
                "ApiGatewayMethodApiGetDashaccessDashtokenCodeVarGet",
                "ApiGatewayMethodApiGetDasheventsAccesstokenVarGet"
              ]
            },
            "GetAuthURLLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAuthURLLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAccessTokenLambdaPermissionApiGateway": "<REDACTED>",
            "GetCalendarEventsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCalendarEventsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-auth-server-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetAuthURLLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw"
              },
              "Export": {
                "Name": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
              }
            },
            "GetAccessTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "GetCalendarEventsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY"
              },
              "Export": {
                "Name": "sls-auth-server-dev-GetCalendarEventsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-auth-server-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getAuthURL": {
          "handler": "handler.getAuthURL",
          "events": [
            {
              "http": {
                "path": "api/get-auth-url",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "auth-server-dev-getAuthURL",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAuthURLLambdaVersion1FXm1Ra3hptIKb8ddrgWCztQ8cZs7eDQ6Xciss0MHw"
        },
        "getAccessToken": "<REDACTED>",
        "getCalendarEvents": {
          "handler": "handler.getCalendarEvents",
          "events": [
            {
              "http": {
                "path": "api/get-events/{access_token}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "auth-server-dev-getCalendarEvents",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCalendarEventsLambdaVersionFW1KOEK8SzQtGxAXmU11UR1s54jy7FGq2sYDjQ1ZtY"
        }
      }
    },
    "serviceRawFile": "service: auth-server\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: eu-central-1\n  timeout: 30\n  environment:\n    CLIENT_ID: ${file(config.json):CLIENT_ID}\n    CLIENT_SECRET: ${file(config.json):CLIENT_SECRET}\n    CALENDAR_ID: ${file(config.json):CALENDAR_ID}\n\nfunctions:\n  getAuthURL:\n    handler: handler.getAuthURL\n    events:\n      - http:\n          path: api/get-auth-url\n          method: get\n          cors: true\n\n  getAccessToken:\n    handler: handler.getAccessToken\n    events:\n      - http:\n          path: api/get-access-token/{code}\n          method: get\n          cors: true\n\n  getCalendarEvents:\n    handler: handler.getCalendarEvents\n    events:\n      - http:\n          path: api/get-events/{access_token}\n          method: get\n          cors: true\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "9d7ab2378d7d9245df1299f5749735f3",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "6dbab4d3-a444-4191-864c-1f302c58b056",
    "orgName": "carrerfoundry",
    "userId": "J4WnvS7vnt8PpYjdcr",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "carrerfoundry",
    "subscription": null,
    "userEmail": "ouelhazi23@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "637423427952",
    "versionSf": "4.1.4",
    "serviceProviderAwsCfStackName": "auth-server-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:637423427952:stack/auth-server-dev/53ec5450-2c44-11ef-9c63-065b6ec8b6b9",
    "serviceProviderAwsCfStackCreated": "2024-06-17T00:55:44.991Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-17T00:56:23.956Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetAccessTokenLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:637423427952:function:auth-server-dev-getAccessToken:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-auth-server-dev-GetAccessTokenLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAuthURLLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:637423427952:function:auth-server-dev-getAuthURL:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCalendarEventsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:637423427952:function:auth-server-dev-getCalendarEvents:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-auth-server-dev-GetCalendarEventsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://2jvcb5hrzf.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-auth-server-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "auth-server-dev-serverlessdeploymentbucket-vl61aiekfyo0",
        "ExportName": "sls-auth-server-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}